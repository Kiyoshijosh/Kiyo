local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Pass the Bomb",
    SubTitle = "by Kiyo",
    TabWidth = 120,
    Size = UDim2.fromOffset(300, 150),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftAlt
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
}

--hitbox

local localPlayerName = game.Players.LocalPlayer.Name

local Options = {}

local hitboxConnections = {}

local function resizeCollisionPart(playerName)
    if playerName ~= localPlayerName then
        local playerModel = game.Workspace:FindFirstChild(playerName)
        if playerModel then
            local collisionPart = playerModel:FindFirstChild("CollisionPart")
            if collisionPart and collisionPart:IsA("BasePart") then
                -- Change the part shape to a sphere (ball)
                collisionPart.Shape = Enum.PartType.Ball
                collisionPart.Size = Vector3.new(5.0, 5.0, 5.0) -- Changed back to 5.0
                collisionPart.Color = Color3.fromRGB(0, 0, 0)
                collisionPart.Transparency = 0.9
                collisionPart.CanCollide = true
            end
        end
    end
end

local function deactivateCollisionPart(playerName)
    if playerName ~= localPlayerName then
        local playerModel = game.Workspace:FindFirstChild(playerName)
        if playerModel then
            local collisionPart = playerModel:FindFirstChild("CollisionPart")
            if collisionPart and collisionPart:IsA("BasePart") then
                collisionPart.Transparency = 1 
                collisionPart.CanCollide = false 
            end
        end
    end
end

local function monitorPlayers()
    for _, player in pairs(game.Players:GetPlayers()) do
        local connection = game:GetService("RunService").Heartbeat:Connect(function()
            if Options.ToggleHit.Value then
                resizeCollisionPart(player.Name)
            else
                deactivateCollisionPart(player.Name)
            end
        end)
        table.insert(hitboxConnections, connection)
    end

    local playerAddedConnection = game.Players.PlayerAdded:Connect(function(player)
        local connection = game:GetService("RunService").Heartbeat:Connect(function()
            if Options.ToggleHit.Value then
                resizeCollisionPart(player.Name)
            else
                deactivateCollisionPart(player.Name)
            end
        end)
        table.insert(hitboxConnections, connection)
    end)
    table.insert(hitboxConnections, playerAddedConnection)
end

local ToggleHit = Tabs.Main:AddToggle("ToggleHit", {Title = "Hitbox", Default = false })
Options.ToggleHit = ToggleHit

ToggleHit:OnChanged(function()
    if Options.ToggleHit.Value then
        monitorPlayers()
    else
        for _, connection in ipairs(hitboxConnections) do
            connection:Disconnect()
        end
        hitboxConnections = {}
        
        for _, player in pairs(game.Players:GetPlayers()) do
            deactivateCollisionPart(player.Name)
        end
    end
end)

Options.ToggleHit:SetValue(false)

--hitbox input

local maxHitboxSize = 5.0 -- Changed back to 5.0

local Input = Tabs.Main:AddInput("Input", {
    Title = "Hitbox Size",
    Default = "5.0", -- Set default back to 5.0
    Placeholder = "Enter size",
    Numeric = true, 
    Finished = false, 
    Callback = function(Value)
        print("Input changed:", Value)
    end
})

Input:OnChanged(function()
    local newSize = tonumber(Input.Value)
    if newSize then
        if newSize > maxHitboxSize then
            newSize = maxHitboxSize 
        elseif newSize < 0 then
            newSize = 0 
        end

        
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Name ~= localPlayerName then
                local playerModel = game.Workspace:FindFirstChild(player.Name)
                if playerModel then
                    local collisionPart = playerModel:FindFirstChild("CollisionPart")
                    if collisionPart and collisionPart:IsA("BasePart") then
                        collisionPart.Size = Vector3.new(newSize, newSize, newSize)
                    end
                end
            end
        end

        print("Hitbox size updated to:", newSize)
    else
        print("Invalid input for hitbox size.")
    end
end)

Window:SelectTab(1)
